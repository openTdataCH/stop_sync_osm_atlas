"""Auto migration

Revision ID: 16d64a23de4e
Revises: 
Create Date: 2025-08-13 11:34:09.818369

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '16d64a23de4e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('atlas_stops',
    sa.Column('sloid', sa.String(length=100), nullable=False),
    sa.Column('atlas_designation', sa.String(length=255), nullable=True),
    sa.Column('atlas_designation_official', sa.String(length=255), nullable=True),
    sa.Column('atlas_business_org_abbr', sa.String(length=100), nullable=True),
    sa.Column('routes_atlas', sa.JSON(), nullable=True),
    sa.Column('routes_hrdf', sa.JSON(), nullable=True),
    sa.Column('routes_unified', sa.JSON(), nullable=True),
    sa.Column('atlas_note', sa.Text(), nullable=True),
    sa.Column('atlas_note_is_persistent', sa.Boolean(), nullable=True),
    sa.Column('atlas_note_user_id', sa.Integer(), nullable=True),
    sa.Column('atlas_note_user_email', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('sloid')
    )
    with op.batch_alter_table('atlas_stops', schema=None) as batch_op:
        batch_op.create_index('idx_atlas_operator', ['atlas_business_org_abbr'], unique=False)
        batch_op.create_index(batch_op.f('ix_atlas_stops_atlas_note_user_id'), ['atlas_note_user_id'], unique=False)

    op.create_table('osm_nodes',
    sa.Column('osm_node_id', sa.String(length=100), nullable=False),
    sa.Column('osm_local_ref', sa.String(length=100), nullable=True),
    sa.Column('osm_name', sa.String(length=255), nullable=True),
    sa.Column('osm_uic_name', sa.String(length=255), nullable=True),
    sa.Column('osm_network', sa.String(length=255), nullable=True),
    sa.Column('osm_public_transport', sa.String(length=255), nullable=True),
    sa.Column('osm_railway', sa.String(length=255), nullable=True),
    sa.Column('osm_amenity', sa.String(length=255), nullable=True),
    sa.Column('osm_aerialway', sa.String(length=255), nullable=True),
    sa.Column('osm_operator', sa.String(length=255), nullable=True),
    sa.Column('routes_osm', sa.JSON(), nullable=True),
    sa.Column('osm_note', sa.Text(), nullable=True),
    sa.Column('osm_note_is_persistent', sa.Boolean(), nullable=True),
    sa.Column('osm_note_user_id', sa.Integer(), nullable=True),
    sa.Column('osm_note_user_email', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('osm_node_id')
    )
    with op.batch_alter_table('osm_nodes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_osm_nodes_osm_note_user_id'), ['osm_note_user_id'], unique=False)

    op.create_table('persistent_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sloid', sa.String(length=100), nullable=True),
    sa.Column('osm_node_id', sa.String(length=100), nullable=True),
    sa.Column('problem_type', sa.String(length=50), nullable=True),
    sa.Column('solution', sa.String(length=500), nullable=True),
    sa.Column('note_type', sa.String(length=20), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.Column('created_by_user_email', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sloid', 'osm_node_id', 'problem_type', 'note_type', name='unique_problem')
    )
    with op.batch_alter_table('persistent_data', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_persistent_data_created_by_user_id'), ['created_by_user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_persistent_data_note_type'), ['note_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_persistent_data_osm_node_id'), ['osm_node_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_persistent_data_problem_type'), ['problem_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_persistent_data_sloid'), ['sloid'], unique=False)

    op.create_table('routes_and_directions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('direction_id', sa.String(length=20), nullable=True),
    sa.Column('osm_route_id', sa.String(length=100), nullable=True),
    sa.Column('osm_nodes_json', sa.JSON(), nullable=True),
    sa.Column('atlas_route_id', sa.String(length=100), nullable=True),
    sa.Column('atlas_sloids_json', sa.JSON(), nullable=True),
    sa.Column('route_name', sa.String(length=255), nullable=True),
    sa.Column('route_short_name', sa.String(length=50), nullable=True),
    sa.Column('route_long_name', sa.String(length=255), nullable=True),
    sa.Column('route_type', sa.String(length=50), nullable=True),
    sa.Column('match_type', sa.String(length=50), nullable=True),
    sa.Column('source', sa.String(length=10), nullable=True),
    sa.Column('atlas_line_name', sa.String(length=100), nullable=True),
    sa.Column('direction_uic', sa.String(length=50), nullable=True),
    sa.Column('route_id_normalized', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('routes_and_directions', schema=None) as batch_op:
        batch_op.create_index('idx_atlas_route_direction', ['atlas_route_id', 'direction_id'], unique=False)
        batch_op.create_index('idx_osm_route_direction', ['osm_route_id', 'direction_id'], unique=False)
        batch_op.create_index('idx_atlas_line_direction_uic', ['atlas_line_name', 'direction_uic'], unique=False)
        batch_op.create_index('idx_source', ['source'], unique=False)

    op.create_table('stops',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sloid', sa.String(length=100), nullable=True),
    sa.Column('stop_type', sa.String(length=50), nullable=True),
    sa.Column('match_type', sa.String(length=50), nullable=True),
    sa.Column('manual_is_persistent', sa.Boolean(), nullable=True),
    sa.Column('atlas_lat', sa.Float(), nullable=True),
    sa.Column('atlas_lon', sa.Float(), nullable=True),
    sa.Column('uic_ref', sa.String(length=100), nullable=True),
    sa.Column('osm_node_id', sa.String(length=100), nullable=True),
    sa.Column('osm_lat', sa.Float(), nullable=True),
    sa.Column('osm_lon', sa.Float(), nullable=True),
    sa.Column('distance_m', sa.Float(), nullable=True),
    sa.Column('osm_node_type', sa.String(length=50), nullable=True),
    sa.Column('atlas_duplicate_sloid', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('stops', schema=None) as batch_op:
        batch_op.create_index('idx_atlas_lat_lon', ['atlas_lat', 'atlas_lon'], unique=False)
        batch_op.create_index('idx_distance_m', ['distance_m'], unique=False)
        batch_op.create_index('idx_osm_lat_lon', ['osm_lat', 'osm_lon'], unique=False)
        batch_op.create_index('idx_stop_type_match_type', ['stop_type', 'match_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_stops_osm_node_id'), ['osm_node_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_stops_sloid'), ['sloid'], unique=False)
        batch_op.create_index(batch_op.f('ix_stops_uic_ref'), ['uic_ref'], unique=False)

    op.create_table('problems',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stop_id', sa.Integer(), nullable=True),
    sa.Column('problem_type', sa.String(length=50), nullable=False),
    sa.Column('solution', sa.String(length=500), nullable=True),
    sa.Column('is_persistent', sa.Boolean(), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.Column('created_by_user_email', sa.String(length=255), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['stop_id'], ['stops.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('problems', schema=None) as batch_op:
        batch_op.create_index('idx_problem_priority', ['priority'], unique=False)
        batch_op.create_index('idx_problem_stop_id', ['stop_id'], unique=False)
        batch_op.create_index('idx_problem_type', ['problem_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_problems_created_by_user_id'), ['created_by_user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('problems', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_problems_created_by_user_id'))
        batch_op.drop_index('idx_problem_type')
        batch_op.drop_index('idx_problem_stop_id')
        batch_op.drop_index('idx_problem_priority')

    op.drop_table('problems')
    with op.batch_alter_table('stops', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_stops_uic_ref'))
        batch_op.drop_index(batch_op.f('ix_stops_sloid'))
        batch_op.drop_index(batch_op.f('ix_stops_osm_node_id'))
        batch_op.drop_index('idx_stop_type_match_type')
        batch_op.drop_index('idx_osm_lat_lon')
        batch_op.drop_index('idx_distance_m')
        batch_op.drop_index('idx_atlas_lat_lon')

    op.drop_table('stops')
    with op.batch_alter_table('routes_and_directions', schema=None) as batch_op:
        batch_op.drop_index('idx_osm_route_direction')
        batch_op.drop_index('idx_atlas_route_direction')

    op.drop_table('routes_and_directions')
    with op.batch_alter_table('persistent_data', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_persistent_data_sloid'))
        batch_op.drop_index(batch_op.f('ix_persistent_data_problem_type'))
        batch_op.drop_index(batch_op.f('ix_persistent_data_osm_node_id'))
        batch_op.drop_index(batch_op.f('ix_persistent_data_note_type'))
        batch_op.drop_index(batch_op.f('ix_persistent_data_created_by_user_id'))

    op.drop_table('persistent_data')
    with op.batch_alter_table('osm_nodes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_osm_nodes_osm_note_user_id'))

    op.drop_table('osm_nodes')
    with op.batch_alter_table('atlas_stops', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_atlas_stops_atlas_note_user_id'))
        batch_op.drop_index('idx_atlas_operator')

    op.drop_table('atlas_stops')
    # ### end Alembic commands ###
